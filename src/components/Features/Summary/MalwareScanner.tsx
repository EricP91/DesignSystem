import React from 'react';
import { Card, Typography, Box, Skeleton } from '@mui/material';
import { makeStyles } from '@mui/styles';
import { capitalize } from '@mui/material/utils';
import {
  WarningTriangleIcon,
  MagnifyingGlassIcon,
  DatabaseIcon,
  CheckListIcon,
  CalendarCallIcon,
} from '../../../assets/icons';
import { TwoLineDescriptionAvatar } from '../..';
import { MTheme } from '../../../theme';
import { NO_VALUE_TEXT } from '../../constants';

const AVATAR_SIZE = '48px';

const useStyles = makeStyles((theme: MTheme) => ({
  root: {
    width: '100%',
    height: '100%',
    padding: theme.spacing(4),
    '& .MuiSkeleton-root': {
      backgroundColor: theme.palette.grey[1100],
      borderRadius: 0,
    },
  },
  header: {
    fontSize: theme.spacing(2.25),
    marginBottom: theme.spacing(4),
    lineHeight: theme.spacing(2.875),
  },
  iconsBlock: {
    width: '100%',
    paddingRight: theme.spacing(8.875),
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',

    '& .MuiAvatar-root': {
      width: AVATAR_SIZE,
      height: AVATAR_SIZE,
      backgroundColor: `${theme.palette.grey[500]}1E`,
      '& .MuiSvgIcon-root': {
        '& path': {
          fill: theme.palette.primary.main,
        },
      },
    },

    '& h6.MuiTypography-root': {
      fontWeight: 500,
      fontSize: theme.spacing(1.5),
      color: theme.palette.grey[600],
    },
    '& p.MuiTypography-root': {
      fontWeight: 400,
      fontSize: theme.spacing(2),
      color: theme.palette.grey[800],
    },
  },
  flexContainer: {
    display: 'flex',
    alignItems: 'center',
  },
}));

export interface MalwareScannerProps {
  malwareScanner: {
    isScanPerformed: string;
    threatsFound: number;
    scanDate: string;
    databaseUpdateDate: string;
    scanResults: string;
  };
  scanPerformedText?: string;
  threatsFoundText?: string;
  scanDateString?: string;
  databaseUpdatedText?: string;
  scanResultsText?: string;
  noValueText?: string;
  title?: string;
  isLoading: boolean;
}

export function MalwareScanner({
  malwareScanner,
  isLoading,
  scanPerformedText = 'Scan performed',
  threatsFoundText = 'Threats found',
  databaseUpdatedText = 'Database updated',
  scanDateString = 'Scan date',
  scanResultsText = 'Scan results',
  noValueText = NO_VALUE_TEXT,
  title = 'Malware scanner',
}: MalwareScannerProps): JSX.Element | null {
  const classes = useStyles();
  const { isScanPerformed, threatsFound, scanDate, databaseUpdateDate, scanResults } = malwareScanner;
  const malwareData: {
    [key: string]: {
      text: string | null;
      icon: JSX.Element;
    };
  } = {
    [scanPerformedText]: {
      text: isScanPerformed?.toString(),
      icon: <MagnifyingGlassIcon />,
    },
    [threatsFoundText]: {
      text: threatsFound?.toString(),
      icon: <WarningTriangleIcon />,
    },
    [scanDateString]: {
      text: scanDate,
      icon: <CalendarCallIcon />,
    },
    [databaseUpdatedText]: {
      text: databaseUpdateDate,
      icon: <DatabaseIcon />,
    },
    [scanResultsText]: {
      text: scanResults,
      icon: <CheckListIcon />,
    },
  };

  return (
    <Card className={classes.root}>
      <Typography className={classes.header} variant="subtitle2">
        {isLoading ? (
          <Skeleton data-testid="malware-header-skeleton" variant="text" width="160px" height="11.7px" />
        ) : (
          title
        )}
      </Typography>
      <Box data-testid="malware-scanner" className={classes.iconsBlock}>
        {Object.keys(malwareData).map((entry) =>
          isLoading ? (
            <Box key={Math.random()} className={classes.flexContainer}>
              <TwoLineDescriptionAvatar>
                <Skeleton animation="wave" variant="circular" width={AVATAR_SIZE} height={AVATAR_SIZE} />
              </TwoLineDescriptionAvatar>
              <Box>
                <Skeleton variant="text" width="86px" height="11.7px" />
                <Skeleton variant="text" width="106px" height="11.7px" />
              </Box>
            </Box>
          ) : (
            <TwoLineDescriptionAvatar
              key={entry}
              primaryText={entry}
              primaryTextMaxWidth={100}
              secondaryTextMaxWidth={210}
              secondaryText={capitalize(malwareData[`${entry}`]?.text || noValueText)}
            >
              {malwareData[`${entry}`].icon}
            </TwoLineDescriptionAvatar>
          )
        )}
      </Box>
    </Card>
  );
}
export default MalwareScanner;
